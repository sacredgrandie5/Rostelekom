Subject: [PATCH] Rostelekom
---
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/.gitignore	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/.name	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,1 @@
+Rostelekom
\ No newline at end of file
Index: .idea/Rostelekom.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Rostelekom.iml b/.idea/Rostelekom.iml
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/Rostelekom.iml	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,247 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0" is_locked="true">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="AlphaUnsortedPropertiesFile" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="Annotator" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="CheckDtdRefs" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="CheckEmptyScriptTag" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="CheckTagEmptyBody" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="CheckValidXmlInScriptTagBody" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="CheckXmlFileWithXercesValidator" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="CommandLineInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="CustomRegExpInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvDuplicateKeyInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvExtraBlankLineInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvIncorrectDelimiterInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvLeadingCharacterInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvLowercaseKeyInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvSpaceAroundSeparatorInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvSpaceInsideNonQuotedInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DotEnvTrailingWhitespaceInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="DuplicateKeyInSection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="DuplicatePropertyInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="DuplicateSectionInFile" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="EditorConfigCharClassLetterRedundancy" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigCharClassRedundancy" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigDeprecatedDescriptor" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigEmptyHeader" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigEmptySection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigEncoding" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigHeaderUniqueness" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigKeyCorrectness" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigListAcceptability" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigMissingRequiredDeclaration" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigNoMatchingFiles" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigNumerousWildcards" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigOptionRedundancy" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigPairAcceptability" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigPartialOverride" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigPatternEnumerationRedundancy" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigPatternRedundancy" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigReferenceCorrectness" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigRootDeclarationCorrectness" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigRootDeclarationUniqueness" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigShadowedOption" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigShadowingOption" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigSpaceInHeader" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigUnexpectedComma" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigUnusedDeclaration" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigValueCorrectness" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigValueUniqueness" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="EditorConfigVerifyByCore" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="EditorConfigWildcardRedundancy" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="EmptyDirectory" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="GrazieInspection" enabled="true" level="GRAMMAR_ERROR" enabled_by_default="true" />
+    <inspection_tool class="HtmlExtraClosingTag" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="HtmlMissingClosingTag" enabled="true" level="INFORMATION" enabled_by_default="true" />
+    <inspection_tool class="HtmlUnknownAnchorTarget" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="HtmlUnknownAttribute" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="HtmlUnknownBooleanAttribute" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="HtmlUnknownTag" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="HtmlUnknownTarget" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="HtmlWrongAttributeValue" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="IgnoreFileDuplicateEntry" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="InconsistentLineSeparators" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="IncorrectFormatting" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="InjectedReferences" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="Json5StandardCompliance" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="JsonDuplicatePropertyKeys" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonPathEvaluateUnknownKey" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonPathUnknownFunction" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonPathUnknownOperator" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonSchemaCompliance" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonSchemaDeprecation" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonSchemaRefReference" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="JsonStandardCompliance" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="LanguageDetectionInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="LongLine" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="LossyEncoding" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownIncorrectTableFormatting" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownIncorrectlyNumberedListItem" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownLinkDestinationWithSpaces" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownNoTableBorders" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="MarkdownOutdatedTableOfContents" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownUnresolvedFileReference" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownUnresolvedHeaderReference" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="MarkdownUnresolvedLinkLabel" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="NonAsciiCharacters" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PoetryPackageVersionsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="ProblematicWhitespace" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyAbstractClassInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyArgumentEqualDefaultInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyArgumentListInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyAssignmentToLoopOrWithParameterInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyAsyncCallInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyAttributeOutsideInitInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyAugmentAssignmentInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyBroadExceptionInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyByteLiteralInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyCallingNonCallableInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyChainedComparisonsInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyClassHasNoInitInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyClassVarInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyClassicStyleClassInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyComparisonWithNoneInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyCompatibilityInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDataclassInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDecoratorInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDefaultArgumentInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDeprecationInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDictCreationInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDictDuplicateKeysInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDocstringTypesInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyDunderSlotsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyExceptClausesOrderInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyExceptionInheritInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyFinalInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyFromFutureImportInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyGlobalUndefinedInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyInconsistentIndentationInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyIncorrectDocstringInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyInitNewSignatureInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyInterpreterInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyListCreationInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyMandatoryEncodingInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMethodFirstArgAssignmentInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyMethodMayBeStaticInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyMethodOverridingInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyMethodParametersInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyMissingConstructorInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyMissingOrEmptyDocstringInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMissingTypeHintsInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyNamedTupleInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyNestedDecoratorsInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyNonAsciiCharInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyNoneFunctionAssignmentInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyOldStyleClassesInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyOverloadsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="1">
+            <item index="0" class="java.lang.String" itemvalue="pytest" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPandasSeriesToListInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPep8Inspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="W292" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8NamingInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyPropertyAccessInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyPropertyDefinitionInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyProtectedMemberInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyProtocolInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRedeclarationInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRedundantParenthesesInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRelativeImportInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyReturnFromInitInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PySetFunctionToLiteralInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyShadowingBuiltinsInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyShadowingNamesInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PySimplifyBooleanCheckInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PySingleQuotedDocstringInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyStatementEffectInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyStringFormatInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyStubPackagesAdvertiser" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyStubPackagesCompatibilityInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PySuperArgumentsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTestParametrizedInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTrailingSemicolonInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTupleAssignmentBalanceInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTupleItemAssignmentInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTypeCheckerInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTypeHintsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyTypedDictInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnboundLocalVariableInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnnecessaryBackslashInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnreachableCodeInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnusedLocalInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyprojectInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="QodanaSanity" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="QodanaServiceMessage" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="ReassignedToPlainText" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RedundantSuppression" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpAnonymousGroup" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="RegExpDuplicateAlternationBranch" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpDuplicateCharacterInClass" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpEmptyAlternationBranch" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpEscapedMetaCharacter" enabled="true" level="INFORMATION" enabled_by_default="true" />
+    <inspection_tool class="RegExpOctalEscape" enabled="true" level="INFORMATION" enabled_by_default="true" />
+    <inspection_tool class="RegExpRedundantClassElement" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpRedundantEscape" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpRedundantNestedCharacterClass" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpRepeatedSpace" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpSimplifiable" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpSingleCharAlternation" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpSuspiciousBackref" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpUnexpectedAnchor" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RegExpUnnecessaryNonCapturingGroup" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RequiredAttributes" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="RestRoleInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="ShellCheck" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="SpellCheckingInspection" enabled="true" level="TYPO" enabled_by_default="true">
+      <option name="processCode" value="true" />
+      <option name="processLiterals" value="true" />
+      <option name="processComments" value="true" />
+    </inspection_tool>
+    <inspection_tool class="TodoComment" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="TomlUnresolvedReference" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="TrailingSpacesInProperty" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="UnresolvedReference" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="UnusedDefine" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="UnusedProperty" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="UseEllipsisInPropertyInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="VulnerableLibrariesGlobal" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="VulnerableLibrariesLocal" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="WrongPropertyKeyValueDelimiter" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="XmlDefaultAttributeValue" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="XmlDeprecatedElement" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="XmlDuplicatedId" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="XmlHighlighting" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="XmlInvalidId" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="XmlPathReference" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="XmlUnboundNsPrefix" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="XmlUnusedNamespaceDeclaration" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="XmlWrongRootElement" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="YAMLDuplicatedKeys" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="YAMLIncompatibleTypes" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="YAMLRecursiveAlias" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="YAMLSchemaDeprecation" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
+    <inspection_tool class="YAMLSchemaValidation" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="YAMLUnresolvedAlias" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="YAMLUnusedAnchor" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="requirements.DuplicatedInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="requirements.InstalledPackageInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="requirements.MergeExtrasInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="requirements.ReferenceExistsInspection" enabled="true" level="ERROR" enabled_by_default="true" />
+    <inspection_tool class="requirements.UninstalledPackageInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="requirements.UnusedInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/misc.xml	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (pythonProject1) (3)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/modules.xml	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Rostelekom.iml" filepath="$PROJECT_DIR$/.idea/Rostelekom.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/.idea/vcs.xml	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/conftest.py b/conftest.py
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/conftest.py	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,111 @@
+import pytest
+import uuid
+import allure
+
+
+@pytest.fixture
+def chrome_options(chrome_options):
+    # chrome_options.binary_location = '/usr/bin/google-chrome-stable'
+    # chrome_options.add_argument('--headless')
+    chrome_options.add_argument('--no-sandbox')
+    chrome_options.add_argument('--log-level=DEBUG')
+
+    return chrome_options
+
+
+@pytest.hookimpl(hookwrapper=True, tryfirst=True)
+def pytest_runtest_makereport(item, call):
+    # This function helps to detect that some test failed
+    # and pass this information to teardown:
+
+    outcome = yield
+    rep = outcome.get_result()
+    setattr(item, "rep_" + rep.when, rep)
+    return rep
+
+
+@pytest.fixture
+def web_browser(request, selenium):
+
+    browser = selenium
+    browser.set_window_size(1400, 1000)
+
+    # Return browser instance to test case:
+    yield browser
+
+    # Do teardown (this code will be executed after each test):
+
+    if request.node.rep_call.failed:
+        # Make the screen-shot if test failed:
+        try:
+            browser.execute_script("document.body.bgColor = 'white';")
+
+            # Make screen-shot for local debug:
+            browser.save_screenshot('screenshots/' + str(uuid.uuid4()) + '.png')
+
+            # Attach screenshot to Allure report:
+            allure.attach(browser.get_screenshot_as_png(),
+                          name=request.function.__name__,
+                          attachment_type=allure.attachment_type.PNG)
+
+            # For happy debugging:
+            print('URL: ', browser.current_url)
+            print('Browser logs:')
+            for log in browser.get_log('browser'):
+                print(log)
+
+        except:
+            pass # just ignore any errors here
+
+
+def get_test_case_docstring(item):
+    """ This function gets doc string from test case and format it
+        to show this docstring instead of the test case name in reports.
+    """
+
+    full_name = ''
+
+    if item._obj.__doc__:
+        # Remove extra whitespaces from the doc string:
+        name = str(item._obj.__doc__.split('.')[0]).strip()
+        full_name = ' '.join(name.split())
+
+        # Generate the list of parameters for parametrized test cases:
+        if hasattr(item, 'callspec'):
+            params = item.callspec.params
+
+            res_keys = sorted([k for k in params])
+            # Create List based on Dict:
+            res = ['{0}_"{1}"'.format(k, params[k]) for k in res_keys]
+            # Add dict with all parameters to the name of test case:
+            full_name += ' Parameters ' + str(', '.join(res))
+            full_name = full_name.replace(':', '')
+
+    return full_name
+
+
+def pytest_itemcollected(item):
+    """ This function modifies names of test cases "on the fly"
+        during the execution of test cases.
+    """
+
+    if item._obj.__doc__:
+        item._nodeid = get_test_case_docstring(item)
+
+
+def pytest_collection_finish(session):
+    """ This function modified names of test cases "on the fly"
+        when we are using --collect-only parameter for pytest
+        (to get the full list of all existing test cases).
+    """
+
+    if session.config.option.collectonly is True:
+        for item in session.items:
+            # If test case has a doc string we need to modify it's name to
+            # it's doc string to show human-readable reports and to
+            # automatically import test cases to test management system.
+            if item._obj.__doc__:
+                full_name = get_test_case_docstring(item)
+                print(full_name)
+
+        pytest.exit('Done!')
\ No newline at end of file
Index: pages/auth_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/auth_page.py b/pages/auth_page.py
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/pages/auth_page.py	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,57 @@
+from pages.base import WebPage
+from pages.elements import WebElement
+
+
+class AuthPage(WebPage):
+
+    def __init__(self, web_driver, url=''):
+        url = 'https://b2c.passport.rt.ru/auth/realms/b2c/protocol/openid-connect/auth?client_id=account_b2c&redirect_uri=https://b2c.passport.rt.ru/account_b2c/login&response_type=code&scope=openid&state=312322e5-94fa-41eb-880e-6e97327a1605&theme&auth_type'
+        super().__init__(web_driver, url)
+
+    phone = WebElement(id='username')
+
+    email = WebElement(id='username')
+
+    login = WebElement(id='username')
+
+    pa = WebElement(id='username')
+
+    password = WebElement(id='password')
+
+    btn = WebElement(id='kc-login')
+
+    recovery = WebElement(id='forgot_password')
+
+    registration = WebElement(id='kc-register')
+
+    code = WebElement(id='back_to_otp_btn')
+
+    auth_code = WebElement(id='address')
+
+    get_code = WebElement(id='otp_get_code')
+
+    rt_code = WebElement(id='rt-code-0')
+
+    captcha = WebElement(alt='Captcha')
+
+    symbol = WebElement(id='captcha')
+
+    contin = WebElement(id='reset')
+
+    new_pass = WebElement(id='password-new')
+
+    confirm = WebElement(id='confirmation')
+
+    save = WebElement(id='t-btn-reset-pass')
+
+    name = WebElement(name='firstName')
+
+    lastname = WebElement(name='lastName')
+
+    region = WebElement(autocomplete='new-password')
+
+    email_or_phone = WebElement(id='address')
+
+    confirmation = WebElement(id='password-confirm')
+
+    register = WebElement(id='register')
\ No newline at end of file
Index: pages/base.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/base.py b/pages/base.py
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/pages/base.py	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,186 @@
+import time
+from termcolor import colored
+
+from selenium.webdriver.common.by import By
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+
+
+class WebPage(object):
+
+    _web_driver = None
+
+    def __init__(self, web_driver, url=''):
+        self._web_driver = web_driver
+        self.get(url)
+
+    def __setattr__(self, name, value):
+        if not name.startswith('_'):
+            self.__getattribute__(name)._set_value(self._web_driver, value)
+        else:
+            super(WebPage, self).__setattr__(name, value)
+
+    def __getattribute__(self, item):
+        attr = object.__getattribute__(self, item)
+
+        if not item.startswith('_') and not callable(attr):
+            attr._web_driver = self._web_driver
+            attr._page = self
+
+        return attr
+
+    def get(self, url):
+        self._web_driver.get(url)
+        self.wait_page_loaded()
+
+    def go_back(self):
+        self._web_driver.back()
+        self.wait_page_loaded()
+
+    def refresh(self):
+        self._web_driver.refresh()
+        self.wait_page_loaded()
+
+    def screenshot(self, file_name='screenshot.png'):
+        self._web_driver.save_screenshot(file_name)
+
+    def scroll_down(self, offset=0):
+        """ Scroll the page down. """
+
+        if offset:
+            self._web_driver.execute_script('window.scrollTo(0, {0});'.format(offset))
+        else:
+            self._web_driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
+
+    def scroll_up(self, offset=0):
+        """ Scroll the page up. """
+
+        if offset:
+            self._web_driver.execute_script('window.scrollTo(0, -{0});'.format(offset))
+        else:
+            self._web_driver.execute_script('window.scrollTo(0, -document.body.scrollHeight);')
+
+    def switch_to_iframe(self, iframe):
+        """ Switch to iframe by it's name. """
+
+        self._web_driver.switch_to.frame(iframe)
+
+    def switch_out_iframe(self):
+        """ Cancel iframe focus. """
+        self._web_driver.switch_to.default_content()
+
+    def get_current_url(self):
+        """ Returns current browser URL. """
+
+        return self._web_driver.current_url
+
+    def get_page_source(self):
+        """ Returns current page body. """
+
+        source = ''
+        try:
+            source = self._web_driver.page_source
+        except:
+            print(colored('Con not get page source', 'red'))
+
+        return source
+
+    def check_js_errors(self, ignore_list=None):
+        """ This function checks JS errors on the page. """
+
+        ignore_list = ignore_list or []
+
+        logs = self._web_driver.get_log('browser')
+        for log_message in logs:
+            if log_message['level'] != 'WARNING':
+                ignore = False
+                for issue in ignore_list:
+                    if issue in log_message['message']:
+                        ignore = True
+                        break
+
+                assert ignore, 'JS error "{0}" on the page!'.format(log_message)
+
+    def wait_page_loaded(self, timeout=60, check_js_complete=True,
+                         check_page_changes=False, check_images=False,
+                         wait_for_element=None,
+                         wait_for_xpath_to_disappear='',
+                         sleep_time=2):
+        """ This function waits until the page will be completely loaded.
+            We use many different ways to detect is page loaded or not:
+
+            1) Check JS status
+            2) Check modification in source code of the page
+            3) Check that all images uploaded completely
+               (Note: this check is disabled by default)
+            4) Check that expected elements presented on the page
+        """
+
+        page_loaded = False
+        double_check = False
+        k = 0
+
+        if sleep_time:
+            time.sleep(sleep_time)
+
+        # Get source code of the page to track changes in HTML:
+        source = ''
+        try:
+            source = self._web_driver.page_source
+        except:
+            pass
+
+        # Wait until page loaded (and scroll it, to make sure all objects will be loaded):
+        while not page_loaded:
+            time.sleep(0.5)
+            k += 1
+
+            if check_js_complete:
+                # Scroll down and wait when page will be loaded:
+                try:
+                    self._web_driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
+                    page_loaded = self._web_driver.execute_script("return document.readyState == 'complete';")
+                except Exception as e:
+                    pass
+
+            if page_loaded and check_page_changes:
+                # Check if the page source was changed
+                new_source = ''
+                try:
+                    new_source = self._web_driver.page_source
+                except:
+                    pass
+
+                page_loaded = new_source == source
+                source = new_source
+
+            # Wait when some element will disappear:
+            if page_loaded and wait_for_xpath_to_disappear:
+                bad_element = None
+
+                try:
+                    bad_element = WebDriverWait(self._web_driver, 0.1).until(
+                        EC.presence_of_element_located((By.XPATH, wait_for_xpath_to_disappear))
+                    )
+                except:
+                    pass  # Ignore timeout errors
+
+                page_loaded = not bad_element
+
+            if page_loaded and wait_for_element:
+                try:
+                    page_loaded = WebDriverWait(self._web_driver, 0.1).until(
+                        EC.element_to_be_clickable(wait_for_element._locator)
+                    )
+                except:
+                    pass  # Ignore timeout errors
+
+            assert k < timeout, 'The page loaded more than {0} seconds!'.format(timeout)
+
+            # Check two times that page completely loaded:
+            if page_loaded and not double_check:
+                page_loaded = False
+                double_check = True
+
+        # Go up:
+        self._web_driver.execute_script('window.scrollTo(document.body.scrollHeight, 0);')
\ No newline at end of file
Index: pages/elements.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/elements.py b/pages/elements.py
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/pages/elements.py	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,299 @@
+import time
+from termcolor import colored
+
+from selenium.webdriver import ActionChains
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+from selenium.webdriver.common.keys import Keys
+
+
+class WebElement(object):
+
+    _locator = ('', '')
+    _web_driver = None
+    _page = None
+    _timeout = 10
+    _wait_after_click = False  # TODO: how we can wait after click?
+
+    def __init__(self, timeout=10, wait_after_click=False, **kwargs):
+        self._timeout = timeout
+        self._wait_after_click = wait_after_click
+
+        for attr in kwargs:
+            self._locator = (str(attr).replace('_', ' '), str(kwargs.get(attr)))
+
+    def find(self, timeout=10):
+        """ Find element on the page. """
+
+        element = None
+
+        try:
+            element = WebDriverWait(self._web_driver, timeout).until(
+               EC.presence_of_element_located(self._locator)
+            )
+        except:
+            print(colored('Element not found on the page!', 'red'))
+
+        return element
+
+    def wait_to_be_clickable(self, timeout=10, check_visibility=True):
+        """ Wait until the element will be ready for click. """
+
+        element = None
+
+        try:
+            element = WebDriverWait(self._web_driver, timeout).until(
+                EC.element_to_be_clickable(self._locator)
+            )
+        except:
+            print(colored('Element not clickable!', 'red'))
+
+        if check_visibility:
+            self.wait_until_not_visible()
+
+        return element
+
+    def is_clickable(self):
+        """ Check is element ready for click or not. """
+
+        element = self.wait_to_be_clickable(timeout=0.1)
+        return element is not None
+
+    def is_presented(self):
+        """ Check that element is presented on the page. """
+
+        element = self.find(timeout=0.1)
+        return element is not None
+
+    def is_visible(self):
+        """ Check is the element visible or not. """
+
+        element = self.find(timeout=0.1)
+
+        if element:
+            return element.is_displayed()
+
+        return False
+
+    def wait_until_not_visible(self, timeout=10):
+
+        element = None
+
+        try:
+            element = WebDriverWait(self._web_driver, timeout).until(
+                EC.visibility_of_element_located(self._locator)
+            )
+        except:
+            print(colored('Element not visible!', 'red'))
+
+        if element:
+            js = ('return (!(arguments[0].offsetParent === null) && '
+                  '!(window.getComputedStyle(arguments[0]) === "none") &&'
+                  'arguments[0].offsetWidth > 0 && arguments[0].offsetHeight > 0'
+                  ');')
+            visibility = self._web_driver.execute_script(js, element)
+            iteration = 0
+
+            while not visibility and iteration < 10:
+                time.sleep(0.5)
+
+                iteration += 1
+
+                visibility = self._web_driver.execute_script(js, element)
+                print('Element {0} visibility: {1}'.format(self._locator, visibility))
+
+        return element
+
+    def send_keys(self, keys, wait=2):
+        """ Send keys to the element. """
+
+        keys = keys.replace('\n', '\ue007')
+
+        element = self.find()
+
+        if element:
+            element.click()
+            element.clear()
+            element.send_keys(keys)
+            time.sleep(wait)
+        else:
+            msg = 'Element with locator {0} not found'
+            raise AttributeError(msg.format(self._locator))
+
+    def get_text(self):
+        """ Get text of the element. """
+
+        element = self.find()
+        text = ''
+
+        try:
+            text = str(element.text)
+        except Exception as e:
+            print('Error: {0}'.format(e))
+
+        return text
+
+    def get_attribute(self, attr_name):
+        """ Get attribute of the element. """
+
+        element = self.find()
+
+        if element:
+            return element.get_attribute(attr_name)
+
+    def _set_value(self, web_driver, value, clear=True):
+        """ Set value to the input element. """
+
+        element = self.find()
+
+        if clear:
+            element.clear()
+
+        element.send_keys(value)
+
+    def click(self, hold_seconds=0, x_offset=1, y_offset=1):
+        """ Wait and click the element. """
+
+        element = self.wait_to_be_clickable()
+
+        if element:
+            action = ActionChains(self._web_driver)
+            action.move_to_element_with_offset(element, x_offset, y_offset).\
+                pause(hold_seconds).click(on_element=element).perform()
+        else:
+            msg = 'Element with locator {0} not found'
+            raise AttributeError(msg.format(self._locator))
+
+        if self._wait_after_click:
+            self._page.wait_page_loaded()
+
+    def right_mouse_click(self, x_offset=0, y_offset=0, hold_seconds=0):
+        """ Click right mouse button on the element. """
+
+        element = self.wait_to_be_clickable()
+
+        if element:
+            action = ActionChains(self._web_driver)
+            action.move_to_element_with_offset(element, x_offset, y_offset). \
+                pause(hold_seconds).context_click(on_element=element).perform()
+        else:
+            msg = 'Element with locator {0} not found'
+            raise AttributeError(msg.format(self._locator))
+
+    def highlight_and_make_screenshot(self, file_name='element.png'):
+        """ Highlight element and make the screen-shot of all page. """
+
+        element = self.find()
+
+        # Scroll page to the element:
+        self._web_driver.execute_script("arguments[0].scrollIntoView();", element)
+
+        # Add red border to the style:
+        self._web_driver.execute_script("arguments[0].style.border='3px solid red'", element)
+
+        # Make screen-shot of the page:
+        self._web_driver.save_screenshot(file_name)
+
+    def scroll_to_element(self):
+        """ Scroll page to the element. """
+
+        element = self.find()
+
+        # Scroll page to the element:
+        # Option #1 to scroll to element:
+        # self._web_driver.execute_script("arguments[0].scrollIntoView();", element)
+
+        # Option #2 to scroll to element:
+        try:
+            element.send_keys(Keys.DOWN)
+        except Exception as e:
+            pass  # Just ignore the error if we can't send the keys to the element
+
+    def delete(self):
+        """ Deletes element from the page. """
+
+        element = self.find()
+
+        # Delete element:
+        self._web_driver.execute_script("arguments[0].remove();", element)
+
+
+class ManyWebElements(WebElement):
+
+    def __getitem__(self, item):
+        """ Get list of elements and try to return required element. """
+
+        elements = self.find()
+        return elements[item]
+
+    def find(self, timeout=10):
+        """ Find elements on the page. """
+
+        elements = []
+
+        try:
+            elements = WebDriverWait(self._web_driver, timeout).until(
+               EC.presence_of_all_elements_located(self._locator)
+            )
+        except:
+            print(colored('Elements not found on the page!', 'red'))
+
+        return elements
+
+    def _set_value(self, web_driver, value):
+        """ Note: this action is not applicable for the list of elements. """
+        raise NotImplemented('This action is not applicable for the list of elements')
+
+    def click(self, hold_seconds=0, x_offset=0, y_offset=0):
+        """ Note: this action is not applicable for the list of elements. """
+        raise NotImplemented('This action is not applicable for the list of elements')
+
+    def count(self):
+        """ Get count of elements. """
+
+        elements = self.find()
+        return len(elements)
+
+    def get_text(self):
+        """ Get text of elements. """
+
+        elements = self.find()
+        result = []
+
+        for element in elements:
+            text = ''
+
+            try:
+                text = str(element.text)
+            except Exception as e:
+                print('Error: {0}'.format(e))
+
+            result.append(text)
+
+        return result
+
+    def get_attribute(self, attr_name):
+        """ Get attribute of all elements. """
+
+        results = []
+        elements = self.find()
+
+        for element in elements:
+            results.append(element.get_attribute(attr_name))
+
+        return results
+
+    def highlight_and_make_screenshot(self, file_name='element.png'):
+        """ Highlight elements and make the screen-shot of all page. """
+
+        elements = self.find()
+
+        for element in elements:
+            # Scroll page to the element:
+            self._web_driver.execute_script("arguments[0].scrollIntoView();", element)
+
+            # Add red border to the style:
+            self._web_driver.execute_script("arguments[0].style.border='3px solid red'", element)
+
+        # Make screen-shot of the page:
+        self._web_driver.save_screenshot(file_name)
\ No newline at end of file
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/requirements.txt	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,5 @@
+pytest
+pytest-selenium
+termcolor
+allure-python-commons
+python-dotenv
\ No newline at end of file
Index: settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.py b/settings.py
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/settings.py	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,12 @@
+import os
+
+from dotenv import load_dotenv
+
+
+load_dotenv()
+
+valid_email = os.getenv('valid_email')
+valid_password = os.getenv('valid_password')
+valid_login = os.getenv('valid_login')
+valid_phone = os.getenv('valid_phone')
+valid_pa = os.getenv('valid_pa')
\ No newline at end of file
Index: tests/test_auth_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_auth_page.py b/tests/test_auth_page.py
new file mode 100644
--- /dev/null	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
+++ b/tests/test_auth_page.py	(revision 71f0932a81b301316a2114b0f6876662c62c6244)
@@ -0,0 +1,405 @@
+import pytest
+import random
+from pages.auth_page import AuthPage
+from settings import valid_email, valid_password, valid_login, valid_phone, valid_pa
+from selenium import webdriver
+from selenium.webdriver.support.wait import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+from selenium.webdriver.common.by import By
+
+
+driver = webdriver.Chrome()
+
+
+def test_registration_email(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.registration.click()
+
+    page.name.send_keys('Марианна')
+
+    page.lastname.send_keys('Ушакова')
+
+    page.region.send_keys('Пермский край')
+
+    page.email_or_phone.send_keys(valid_email)
+
+    page.password.send_keys(valid_password)
+
+    page.confirmation.send_keys(valid_password)
+
+    page.register.click()
+
+    page.auth_code.send_keys(valid_email)
+    page.get_code.click()
+
+    page2 = pytest.driver.get('https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox')
+    element = WebDriverWait(driver, 10).until(
+        EC.text_to_be_present_in_element(By.TAG_NAME, 'div > span', 'Код подтверждения')
+    )
+    page2.element.click()
+    element2 = driver.find_element(By.TAG_NAME, 'div > p')
+    for i in element2:
+        numb = i.text.split(' ')
+        number = numb[2]
+        my_code = number.get_text()
+    page = AuthPage(web_browser)
+
+    page.rt_code.send_keys(my_code)
+
+    assert page.get_current_url() == 'https://start.rt.ru/?tab=main'
+
+
+def test_registration_phone(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.registration.click()
+
+    page.name.send_keys('Мария')
+
+    page.lastname.send_keys('Ушакова')
+
+    page.region.send_keys('Москва г')
+
+    page.email_or_phone.send_keys(valid_phone)
+
+    page.password.send_keys(valid_password)
+
+    page.confirmation.send_keys(valid_password)
+
+    page.register.click()
+
+    page.auth_code.send_keys(valid_phone)
+    page.get_code.click()
+
+    page.rt_code.send_keys()
+
+    assert page.get_current_url() == 'https://start.rt.ru/?tab=main'
+
+
+@pytest.mark.parametrize
+def test_registration_phone_negativ(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.registration.click()
+
+    page.name.send_keys('Мария')
+
+    page.lastname.send_keys('Ушакова')
+
+    page.region.send_keys('Москва г')
+
+    page.email_or_phone.send_keys(valid_phone)
+
+    page.password.send_keys(valid_password)
+
+    page.confirmation.send_keys(valid_password)
+
+    page.register.click()
+
+    page.auth_code.send_keys(valid_phone)
+    page.get_code.click()
+
+    page.rt_code.send_keys()
+
+    assert page.get_current_url() == 'https://start.rt.ru/?tab=main'
+
+
+def test_authorisation_login(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.login.send_keys(valid_login)
+
+    page.password.send_keys(valid_password)
+
+    page.btn.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/account_b2c/page?state=312322e5-94fa-41eb-880e-6e97327a1605&client_id=account_b2c#/'
+
+
+@pytest.mark.parametrize
+def test_authorisation_login_negativ(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.login.send_keys(valid_login)
+
+    page.password.send_keys(valid_password)
+
+    page.btn.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/account_b2c/page?state=312322e5-94fa-41eb-880e-6e97327a1605&client_id=account_b2c#/'
+
+
+def test_authorisation_email(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.email.send_keys(valid_email)
+
+    page.password.send_keys(valid_password)
+
+    page.btn.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/account_b2c/page?state=312322e5-94fa-41eb-880e-6e97327a1605&client_id=account_b2c#/'
+
+
+def test_authorisation_phone(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.phone.send_keys(valid_phone)
+
+    page.password.send_keys(valid_password)
+
+    page.btn.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/account_b2c/page?state=312322e5-94fa-41eb-880e-6e97327a1605&client_id=account_b2c#/'
+
+
+def test_authorisation_check(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.pa.send_keys(valid_pa)
+
+    page.password.send_keys(valid_password)
+
+    page.btn.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/account_b2c/page?state=312322e5-94fa-41eb-880e-6e97327a1605&client_id=account_b2c#/'
+
+
+def test_authorisation_code_email(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.code.click()
+
+    page.auth_code.send_keys(valid_email)
+
+    page.get_code.click()
+
+    page2 = pytest.driver.get('https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox')
+
+    element = WebDriverWait(driver, 10).until(
+        EC.text_to_be_present_in_element(By.TAG_NAME, 'div > span', 'Код авторизации в личном кабинете')
+    )
+
+    page2.element.click()
+
+    element2 = driver.find_element(By.TAG_NAME, 'div > p')
+
+    for i in element2:
+        numb = i.text.split(' ')
+        number = numb[2]
+        my_code = number.get_text()
+
+    page = AuthPage(web_browser)
+
+    page.rt_code.send_keys(my_code)
+
+    assert page.get_current_url() == 'https://start.rt.ru/?tab=main'
+
+
+def test_authorisation_code_phone(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.code.click()
+
+    page.auth_code.send_keys(valid_phone)
+
+    page.get_code.click()
+
+    page.rt_code.send_keys()
+
+    assert page.get_current_url() == 'https://start.rt.ru/?tab=main'
+
+
+def test_pass_recovery_phone(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.recovery.click()
+
+    page.phone.send_keys(valid_phone)
+
+    symbols = page.captcha.get_text()
+
+    page.symbol.send_keys(symbols)
+
+    page.contin.click()
+
+    page.rt_code.send_keys()
+
+    new_pass = random
+
+    page.new_pass.send_keys(new_pass)
+
+    page.confirm.send_keys(new_pass)
+
+    page.save.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/auth/realms/b2c/protocol/openid-connect/auth?client_id=lk_decosystems&redirect_uri=https://start.rt.ru/&response_type=code&scope=openid&theme=light'
+
+
+def test_pass_recovery_email(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.recovery.click()
+
+    page.email.send_keys(valid_email)
+
+    symbols = page.captcha.get_text()
+
+    page.symbol.send_keys(symbols)
+
+    page.contin.click()
+
+    page2 = pytest.driver.get('https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox')
+    element = WebDriverWait(driver, 10).until(
+        EC.text_to_be_present_in_element(By.TAG_NAME, 'div > span', 'Код подтверждения')
+    )
+    page2.element.click()
+    element2 = driver.find_element(By.TAG_NAME, 'div > p')
+    for i in element2:
+        numb = i.text.split(' ')
+        number = numb[2]
+        my_code = number.get_text()
+    page = AuthPage(web_browser)
+
+    page.rt_code.send_keys(my_code)
+
+    new_pass = random
+
+    page.new_pass.send_keys(new_pass)
+
+    page.confirm.send_keys(new_pass)
+
+    page.save.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/auth/realms/b2c/protocol/openid-connect/auth?client_id=lk_decosystems&redirect_uri=https://start.rt.ru/&response_type=code&scope=openid&theme=light'
+
+
+@pytest.mark.parametrize
+def test_pass_recovery_email_negativ(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.recovery.click()
+
+    page.email.send_keys(valid_email)
+
+    symbols = page.captcha.get_text()
+
+    page.symbol.send_keys(symbols)
+
+    page.contin.click()
+
+    page2 = pytest.driver.get('https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox')
+    element = WebDriverWait(driver, 10).until(
+        EC.text_to_be_present_in_element(By.TAG_NAME, 'div > span', 'Код подтверждения')
+    )
+    page2.element.click()
+    element2 = driver.find_element(By.TAG_NAME, 'div > p')
+    for i in element2:
+        numb = i.text.split(' ')
+        number = numb[2]
+        my_code = number.get_text()
+    page = AuthPage(web_browser)
+
+    page.rt_code.send_keys(my_code)
+
+    new_pass = random
+
+    page.new_pass.send_keys(new_pass)
+
+    page.confirm.send_keys(new_pass)
+
+    page.save.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/auth/realms/b2c/protocol/openid-connect/auth?client_id=lk_decosystems&redirect_uri=https://start.rt.ru/&response_type=code&scope=openid&theme=light'
+
+
+def test_pass_recovery_check(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.recovery.click()
+
+    page.pa.send_keys(valid_pa)
+
+    symbols = page.captcha.get_text()
+
+    page.symbol.send_keys(symbols)
+
+    page.contin.click()
+
+    page2 = pytest.driver.get('https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox')
+    element = WebDriverWait(driver, 10).until(
+        EC.text_to_be_present_in_element(By.TAG_NAME, 'div > span', 'Код подтверждения')
+    )
+    page2.element.click()
+    element2 = driver.find_element(By.TAG_NAME, 'div > p')
+    for i in element2:
+        numb = i.text.split(' ')
+        number = numb[2]
+        my_code = number.get_text()
+    page = AuthPage(web_browser)
+
+    page.rt_code.send_keys(my_code)
+
+    new_pass = random
+
+    page.new_pass.send_keys(new_pass)
+
+    page.confirm.send_keys(new_pass)
+
+    page.save.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/auth/realms/b2c/protocol/openid-connect/auth?client_id=lk_decosystems&redirect_uri=https://start.rt.ru/&response_type=code&scope=openid&theme=light'
+
+
+def test_pass_recovery_login(web_browser):
+
+    page = AuthPage(web_browser)
+
+    page.recovery.click()
+
+    page.login.send_keys(valid_login)
+
+    symbols = page.captcha.get_text()
+
+    page.symbol.send_keys(symbols)
+
+    page.contin.click()
+
+    page2 = pytest.driver.get('https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox')
+    element = WebDriverWait(driver, 10).until(
+        EC.text_to_be_present_in_element(By.TAG_NAME, 'div > span', 'Код подтверждения')
+    )
+    page2.element.click()
+    element2 = driver.find_element(By.TAG_NAME, 'div > p')
+    for i in element2:
+        numb = i.text.split(' ')
+        number = numb[2]
+        my_code = number.get_text()
+    page = AuthPage(web_browser)
+
+    page.rt_code.send_keys(my_code)
+
+    new_pass = random
+
+    page.new_pass.send_keys(new_pass)
+
+    page.confirm.send_keys(new_pass)
+
+    page.save.click()
+
+    assert page.get_current_url() == 'https://b2c.passport.rt.ru/auth/realms/b2c/protocol/openid-connect/auth?client_id=lk_decosystems&redirect_uri=https://start.rt.ru/&response_type=code&scope=openid&theme=light'
